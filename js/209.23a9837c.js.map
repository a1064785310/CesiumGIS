{"version":3,"file":"js/209.23a9837c.js","mappings":"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","sources":["webpack://webgis/./src/components/public/grounded_billboard.vue","webpack://webgis/./src/components/public/grounded_billboard.vue?05e3","webpack://webgis/./node_modules/@cesium/engine/Source/Core/PinBuilder.js"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\nimport { randomPoint } from '@turf/turf'\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    async init() {\r\n      const viewer = new Cesium.Viewer('cesiumContainer', { terrainProvider: await Cesium.createWorldTerrainAsync() })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      viewer.scene.globe.depthTestAgainstTerrain = true\r\n      viewer.scene.debugShowFramesPerSecond = true // 显示帧率\r\n\r\n      // 1、生成大量随机点\r\n      const points = randomPoint(500, { bbox: [100, 25, 102, 27] })\r\n      // 2、Cartographic数组\r\n      const positions = []\r\n      for (let point of points.features) {\r\n        const coordinates = point.geometry.coordinates\r\n        const position = Cesium.Cartographic.fromDegrees(coordinates[0], coordinates[1])\r\n        positions.push(position)\r\n      }\r\n      // 3、高程采样\r\n      const pinBuilder = new Cesium.PinBuilder();\r\n      const collection = new Cesium.BillboardCollection()\r\n      const terrainProvider = viewer.terrainProvider\r\n      const promise = Cesium.sampleTerrainMostDetailed(terrainProvider, positions);\r\n      Promise.resolve(promise).then(function (updatedPositions) {\r\n        for (let position of updatedPositions) {\r\n          collection.add({\r\n            position: Cesium.Cartesian3.fromRadians(position.longitude, position.latitude, position.height),\r\n            image: pinBuilder.fromColor(Cesium.Color.fromRandom({ alpha: 1.0 }), 20).toDataURL(),\r\n            verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n            horizontalOrigin: Cesium.HorizontalOrigin.CENTER,\r\n          })\r\n        }\r\n        viewer.scene.primitives.add(collection)\r\n      });\r\n\r\n      const center = Cesium.Cartesian3.fromDegrees(101, 26);\r\n      viewer.camera.lookAt(center, new Cesium.Cartesian3(0.0, -10000.0, 3930.0));\r\n      viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./grounded_billboard.vue?vue&type=template&id=705b329c&scoped=true\"\nimport script from \"./grounded_billboard.vue?vue&type=script&lang=js\"\nexport * from \"./grounded_billboard.vue?vue&type=script&lang=js\"\n\nimport \"./grounded_billboard.vue?vue&type=style&index=0&id=705b329c&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Git\\\\webgis-demo\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-705b329c\"]])\n\nexport default __exports__","import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|string} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {string} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(\n    buildModuleUrl(`Assets/Textures/maki/${encodeURIComponent(id)}.png`),\n    undefined,\n    color,\n    size,\n    this._cache\n  );\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {string} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nconst colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  const imageSize = size / 2.5;\n  let sizeX = imageSize;\n  let sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  const x = Math.round((size - sizeX) / 2);\n  const y = Math.round((7 / 24) * size - sizeY / 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nconst stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  const id = JSON.stringify(stringifyScratch);\n\n  const item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    const resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    const promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    const image = writeTextToCanvas(label, {\n      font: `bold ${size}px sans-serif`,\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;\n"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","async","viewer","Cesium","terrainProvider","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","globe","depthTestAgainstTerrain","debugShowFramesPerSecond","points","randomPoint","bbox","positions","point","features","coordinates","geometry","position","push","pinBuilder","collection","promise","Promise","resolve","then","updatedPositions","add","longitude","latitude","height","image","fromColor","alpha","toDataURL","verticalOrigin","horizontalOrigin","primitives","center","camera","lookAt","lookAtTransform","__exports__","render","PinBuilder","_cache","prototype","color","size","defined","DeveloperError","createPin","undefined","fromUrl","url","fromMakiIconId","buildModuleUrl","encodeURIComponent","fromText","text","colorScratch","Color","drawPin","context2D","save","scale","fillStyle","toCssColorString","strokeStyle","brighten","lineWidth","beginPath","moveTo","lineTo","bezierCurveTo","closePath","fill","stroke","restore","drawIcon","imageSize","sizeX","sizeY","width","x","Math","round","y","globalCompositeOperation","drawImage","fillRect","stringifyScratch","Array","label","cache","JSON","stringify","item","canvas","document","createElement","getContext","resource","Resource","fetchImage","writeTextToCanvas","font"],"sourceRoot":""}