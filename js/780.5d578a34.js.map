{"version":3,"file":"js/780.5d578a34.js","mappings":"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","sources":["webpack://webgis/./node_modules/topojson-client/src/reverse.js","webpack://webgis/./node_modules/topojson-client/src/identity.js","webpack://webgis/./node_modules/topojson-client/src/transform.js","webpack://webgis/./node_modules/topojson-client/src/feature.js","webpack://webgis/./src/components/public/trail_line.vue","webpack://webgis/./node_modules/@cesium/engine/Source/Core/getFilenameFromUri.js","webpack://webgis/./node_modules/@cesium/engine/Source/DataSources/GeoJsonDataSource.js","webpack://webgis/./src/components/public/trail_line.vue?0e36","webpack://webgis/./node_modules/@cesium/engine/Source/Core/PinBuilder.js"],"sourcesContent":["export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity.js\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","import reverse from \"./reverse.js\";\nimport transform from \"./transform.js\";\n\nexport default function(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\nconst road = require('../../../public/SampleData/road.json')\r\n\r\nclass SpriteLineMaterialProperty {\r\n  constructor(options) {\r\n    this._definitionChanged = new Cesium.Event();\r\n    this._speed = undefined\r\n    this._color = undefined\r\n    this.speed = options.speed\r\n    this.color = options.color\r\n  }\r\n  get isConstant() {\r\n    return false;\r\n  }\r\n\r\n  get definitionChanged() {\r\n    return this._definitionChanged;\r\n  }\r\n  // eslint-disable-next-line\r\n  getType(time) {\r\n    return Cesium.Material.SpriteLineMaterialType;\r\n  }\r\n\r\n  getValue(time, result) {\r\n    if (!Cesium.defined(result)) {\r\n      result = {};\r\n    }\r\n    result.color = Cesium.Property.getValueOrDefault(this._color, time, Cesium.Color.RED, result.color);\r\n    result.speed = Cesium.Property.getValueOrDefault(this._speed, time, 10, result.speed);\r\n    return result;\r\n  }\r\n\r\n  equals(other) {\r\n    return (this === other ||\r\n      (other instanceof SpriteLineMaterialProperty &&\r\n        Cesium.Property.equals(this._color, other._color) &&\r\n        Cesium.Property.equals(this._speed, other._speed)))\r\n  }\r\n}\r\nObject.defineProperties(SpriteLineMaterialProperty.prototype, {\r\n  speed: Cesium.createPropertyDescriptor('speed'),\r\n  color: Cesium.createPropertyDescriptor('color')\r\n})\r\nCesium.SpriteLineMaterialProperty = SpriteLineMaterialProperty\r\nCesium.Material.SpriteLineMaterialType = 'SpriteLineMaterialType';\r\nCesium.Material.SpriteLineMaterialSource = `\r\n  uniform vec4 color;  \r\n  const float pi = 3.1415926;\r\n  czm_material czm_getMaterial(czm_materialInput materialInput)\r\n  {\r\n    czm_material material = czm_getDefaultMaterial(materialInput);\r\n    float time = fract( czm_frameNumber * speed / 1000.0);\r\n    vec2 st = materialInput.st;\r\n    material.diffuse = color.rgb;\r\n    material.alpha = 1.0 - fract(st.s * 2.0 + time);\r\n    return material;\r\n  }\r\n  `\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.SpriteLineMaterialType, {\r\n  fabric: {\r\n    type: Cesium.Material.SpriteLineMaterialType,\r\n    uniforms: {\r\n      color: new Cesium.Color(1.0, 1.0, 0.0, 1.0),\r\n      speed: 5.0\r\n    },\r\n    source: Cesium.Material.SpriteLineMaterialSource\r\n  },\r\n  // eslint-disable-next-line\r\n  translucent: function (material) {\r\n    return true;\r\n  }\r\n})\r\n\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Cesium.Viewer('cesiumContainer', {\r\n        baseLayer: new Cesium.ImageryLayer(\r\n          new Cesium.UrlTemplateImageryProvider({\r\n            url: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\",\r\n            subdomains: [\"a\", \"b\", \"c\", \"d\"],\r\n          })\r\n        )\r\n      })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n\r\n      Cesium.GeoJsonDataSource.load(road).then(dataSource => {\r\n        viewer.zoomTo(dataSource)\r\n        viewer.dataSources.add(dataSource);\r\n        var entities = dataSource.entities.values;\r\n        for (let entity of entities) {\r\n          entity.polyline.width = 1\r\n          entity.polyline.material = new Cesium.SpriteLineMaterialProperty({\r\n            color: Cesium.Color.AQUA,\r\n            speed: 10.0\r\n          })\r\n        }\r\n      });\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import Uri from \"urijs\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Given a URI, returns the last segment of the URI, removing any path or query information.\n * @function getFilenameFromUri\n *\n * @param {string} uri The Uri.\n * @returns {string} The last segment of the Uri.\n *\n * @example\n * //fileName will be\"simple.czml\";\n * const fileName = Cesium.getFilenameFromUri('/Gallery/simple.czml?value=true&example=false');\n */\nfunction getFilenameFromUri(uri) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(uri)) {\n    throw new DeveloperError(\"uri is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const uriObject = new Uri(uri);\n  uriObject.normalize();\n  let path = uriObject.path();\n  const index = path.lastIndexOf(\"/\");\n  if (index !== -1) {\n    path = path.substr(index + 1);\n  }\n  return path;\n}\nexport default getFilenameFromUri;\n","import ArcType from \"../Core/ArcType.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport * as topojson from \"topojson-client\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\n\nfunction defaultCrsFunction(coordinates) {\n  return Cartesian3.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);\n}\n\nconst crsNames = {\n  \"urn:ogc:def:crs:OGC:1.3:CRS84\": defaultCrsFunction,\n  \"EPSG:4326\": defaultCrsFunction,\n  \"urn:ogc:def:crs:EPSG::4326\": defaultCrsFunction,\n};\n\nconst crsLinkHrefs = {};\nconst crsLinkTypes = {};\nlet defaultMarkerSize = 48;\nlet defaultMarkerSymbol;\nlet defaultMarkerColor = Color.ROYALBLUE;\nlet defaultStroke = Color.YELLOW;\nlet defaultStrokeWidth = 2;\nlet defaultFill = Color.fromBytes(255, 255, 0, 100);\nlet defaultClampToGround = false;\n\nconst sizes = {\n  small: 24,\n  medium: 48,\n  large: 64,\n};\n\nconst simpleStyleIdentifiers = [\n  \"title\",\n  \"description\", //\n  \"marker-size\",\n  \"marker-symbol\",\n  \"marker-color\",\n  \"stroke\", //\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"fill\",\n  \"fill-opacity\",\n];\n\nfunction defaultDescribe(properties, nameProperty) {\n  let html = \"\";\n  for (const key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = properties[key];\n      if (defined(value)) {\n        if (typeof value === \"object\") {\n          html += `<tr><th>${key}</th><td>${defaultDescribe(value)}</td></tr>`;\n        } else {\n          html += `<tr><th>${key}</th><td>${value}</td></tr>`;\n        }\n      }\n    }\n  }\n\n  if (html.length > 0) {\n    html = `<table class=\"cesium-infoBox-defaultTable\"><tbody>${html}</tbody></table>`;\n  }\n\n  return html;\n}\n\nfunction createDescriptionCallback(describe, properties, nameProperty) {\n  let description;\n  return function (time, result) {\n    if (!defined(description)) {\n      description = describe(properties, nameProperty);\n    }\n    return description;\n  };\n}\n\nfunction defaultDescribeProperty(properties, nameProperty) {\n  return new CallbackProperty(\n    createDescriptionCallback(defaultDescribe, properties, nameProperty),\n    true\n  );\n}\n\n//GeoJSON specifies only the Feature object has a usable id property\n//But since \"multi\" geometries create multiple entity,\n//we can't use it for them either.\nfunction createObject(geoJson, entityCollection, describe) {\n  let id = geoJson.id;\n  if (!defined(id) || geoJson.type !== \"Feature\") {\n    id = createGuid();\n  } else {\n    let i = 2;\n    let finalId = id;\n    while (defined(entityCollection.getById(finalId))) {\n      finalId = `${id}_${i}`;\n      i++;\n    }\n    id = finalId;\n  }\n\n  const entity = entityCollection.getOrCreateEntity(id);\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    entity.properties = properties;\n\n    let nameProperty;\n\n    //Check for the simplestyle specified name first.\n    const name = properties.title;\n    if (defined(name)) {\n      entity.name = name;\n      nameProperty = \"title\";\n    } else {\n      //Else, find the name by selecting an appropriate property.\n      //The name will be obtained based on this order:\n      //1) The first case-insensitive property with the name 'title',\n      //2) The first case-insensitive property with the name 'name',\n      //3) The first property containing the word 'title'.\n      //4) The first property containing the word 'name',\n      let namePropertyPrecedence = Number.MAX_VALUE;\n      for (const key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          const lowerKey = key.toLowerCase();\n\n          if (namePropertyPrecedence > 1 && lowerKey === \"title\") {\n            namePropertyPrecedence = 1;\n            nameProperty = key;\n            break;\n          } else if (namePropertyPrecedence > 2 && lowerKey === \"name\") {\n            namePropertyPrecedence = 2;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 3 && /title/i.test(key)) {\n            namePropertyPrecedence = 3;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 4 && /name/i.test(key)) {\n            namePropertyPrecedence = 4;\n            nameProperty = key;\n          }\n        }\n      }\n      if (defined(nameProperty)) {\n        entity.name = properties[nameProperty];\n      }\n    }\n\n    const description = properties.description;\n    if (description !== null) {\n      entity.description = !defined(description)\n        ? describe(properties, nameProperty)\n        : new ConstantProperty(description);\n    }\n  }\n  return entity;\n}\n\nfunction coordinatesArrayToCartesianArray(coordinates, crsFunction) {\n  const positions = new Array(coordinates.length);\n  for (let i = 0; i < coordinates.length; i++) {\n    positions[i] = crsFunction(coordinates[i]);\n  }\n  return positions;\n}\n\nconst geoJsonObjectTypes = {\n  Feature: processFeature,\n  FeatureCollection: processFeatureCollection,\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\nconst geometryTypes = {\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\n// GeoJSON processing functions\nfunction processFeature(dataSource, feature, notUsed, crsFunction, options) {\n  if (feature.geometry === null) {\n    //Null geometry is allowed, so just create an empty entity instance for it.\n    createObject(feature, dataSource._entityCollection, options.describe);\n    return;\n  }\n\n  if (!defined(feature.geometry)) {\n    throw new RuntimeError(\"feature.geometry is required.\");\n  }\n\n  const geometryType = feature.geometry.type;\n  const geometryHandler = geometryTypes[geometryType];\n  if (!defined(geometryHandler)) {\n    throw new RuntimeError(`Unknown geometry type: ${geometryType}`);\n  }\n  geometryHandler(dataSource, feature, feature.geometry, crsFunction, options);\n}\n\nfunction processFeatureCollection(\n  dataSource,\n  featureCollection,\n  notUsed,\n  crsFunction,\n  options\n) {\n  const features = featureCollection.features;\n  for (let i = 0, len = features.length; i < len; i++) {\n    processFeature(dataSource, features[i], undefined, crsFunction, options);\n  }\n}\n\nfunction processGeometryCollection(\n  dataSource,\n  geoJson,\n  geometryCollection,\n  crsFunction,\n  options\n) {\n  const geometries = geometryCollection.geometries;\n  for (let i = 0, len = geometries.length; i < len; i++) {\n    const geometry = geometries[i];\n    const geometryType = geometry.type;\n    const geometryHandler = geometryTypes[geometryType];\n    if (!defined(geometryHandler)) {\n      throw new RuntimeError(`Unknown geometry type: ${geometryType}`);\n    }\n    geometryHandler(dataSource, geoJson, geometry, crsFunction, options);\n  }\n}\n\nfunction createPoint(dataSource, geoJson, crsFunction, coordinates, options) {\n  let symbol = options.markerSymbol;\n  let color = options.markerColor;\n  let size = options.markerSize;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const cssColor = properties[\"marker-color\"];\n    if (defined(cssColor)) {\n      color = Color.fromCssColorString(cssColor);\n    }\n\n    size = defaultValue(sizes[properties[\"marker-size\"]], size);\n    const markerSymbol = properties[\"marker-symbol\"];\n    if (defined(markerSymbol)) {\n      symbol = markerSymbol;\n    }\n  }\n\n  let canvasOrPromise;\n  if (defined(symbol)) {\n    if (symbol.length === 1) {\n      canvasOrPromise = dataSource._pinBuilder.fromText(\n        symbol.toUpperCase(),\n        color,\n        size\n      );\n    } else {\n      canvasOrPromise = dataSource._pinBuilder.fromMakiIconId(\n        symbol,\n        color,\n        size\n      );\n    }\n  } else {\n    canvasOrPromise = dataSource._pinBuilder.fromColor(color, size);\n  }\n\n  const billboard = new BillboardGraphics();\n  billboard.verticalOrigin = new ConstantProperty(VerticalOrigin.BOTTOM);\n\n  // Clamp to ground if there isn't a height specified\n  if (coordinates.length === 2 && options.clampToGround) {\n    billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.billboard = billboard;\n  entity.position = new ConstantPositionProperty(crsFunction(coordinates));\n\n  const promise = Promise.resolve(canvasOrPromise)\n    .then(function (image) {\n      billboard.image = new ConstantProperty(image);\n    })\n    .catch(function () {\n      billboard.image = new ConstantProperty(\n        dataSource._pinBuilder.fromColor(color, size)\n      );\n    });\n\n  dataSource._promises.push(promise);\n}\n\nfunction processPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  createPoint(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPoint(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const coordinates = geometry.coordinates;\n  for (let i = 0; i < coordinates.length; i++) {\n    createPoint(dataSource, geoJson, crsFunction, coordinates[i], options);\n  }\n}\n\nfunction createLineString(\n  dataSource,\n  geoJson,\n  crsFunction,\n  coordinates,\n  options\n) {\n  let material = options.strokeMaterialProperty;\n  let widthProperty = options.strokeWidthProperty;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    let color;\n    const stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    const opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = material.color.getValue().clone();\n      }\n      color.alpha = opacity;\n    }\n    if (defined(color)) {\n      material = new ColorMaterialProperty(color);\n    }\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  const polylineGraphics = new PolylineGraphics();\n  entity.polyline = polylineGraphics;\n\n  polylineGraphics.clampToGround = options.clampToGround;\n  polylineGraphics.material = material;\n  polylineGraphics.width = widthProperty;\n  polylineGraphics.positions = new ConstantProperty(\n    coordinatesArrayToCartesianArray(coordinates, crsFunction)\n  );\n  polylineGraphics.arcType = ArcType.RHUMB;\n}\n\nfunction processLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  createLineString(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const lineStrings = geometry.coordinates;\n  for (let i = 0; i < lineStrings.length; i++) {\n    createLineString(dataSource, geoJson, crsFunction, lineStrings[i], options);\n  }\n}\n\nfunction createPolygon(dataSource, geoJson, crsFunction, coordinates, options) {\n  if (coordinates.length === 0 || coordinates[0].length === 0) {\n    return;\n  }\n\n  let outlineColorProperty = options.strokeMaterialProperty.color;\n  let material = options.fillMaterialProperty;\n  let widthProperty = options.strokeWidthProperty;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    let color;\n    const stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    let opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = outlineColorProperty.getValue().clone();\n      }\n      color.alpha = opacity;\n    }\n\n    if (defined(color)) {\n      outlineColorProperty = new ConstantProperty(color);\n    }\n\n    let fillColor;\n    const fill = properties.fill;\n    const materialColor = material.color.getValue();\n    if (defined(fill)) {\n      fillColor = Color.fromCssColorString(fill);\n      fillColor.alpha = materialColor.alpha;\n    }\n    opacity = properties[\"fill-opacity\"];\n    if (defined(opacity) && opacity !== materialColor.alpha) {\n      if (!defined(fillColor)) {\n        fillColor = materialColor.clone();\n      }\n      fillColor.alpha = opacity;\n    }\n    if (defined(fillColor)) {\n      material = new ColorMaterialProperty(fillColor);\n    }\n  }\n\n  const polygon = new PolygonGraphics();\n  polygon.outline = new ConstantProperty(true);\n  polygon.outlineColor = outlineColorProperty;\n  polygon.outlineWidth = widthProperty;\n  polygon.material = material;\n  polygon.arcType = ArcType.RHUMB;\n\n  const holes = [];\n  for (let i = 1, len = coordinates.length; i < len; i++) {\n    holes.push(\n      new PolygonHierarchy(\n        coordinatesArrayToCartesianArray(coordinates[i], crsFunction)\n      )\n    );\n  }\n\n  const positions = coordinates[0];\n  polygon.hierarchy = new ConstantProperty(\n    new PolygonHierarchy(\n      coordinatesArrayToCartesianArray(positions, crsFunction),\n      holes\n    )\n  );\n  if (positions[0].length > 2) {\n    polygon.perPositionHeight = new ConstantProperty(true);\n  } else if (!options.clampToGround) {\n    polygon.height = 0;\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.polygon = polygon;\n}\n\nfunction processPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  createPolygon(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiPolygon(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const polygons = geometry.coordinates;\n  for (let i = 0; i < polygons.length; i++) {\n    createPolygon(dataSource, geoJson, crsFunction, polygons[i], options);\n  }\n}\n\nfunction processTopology(dataSource, geoJson, geometry, crsFunction, options) {\n  for (const property in geometry.objects) {\n    if (geometry.objects.hasOwnProperty(property)) {\n      const feature = topojson.feature(geometry, geometry.objects[property]);\n      const typeHandler = geoJsonObjectTypes[feature.type];\n      typeHandler(dataSource, feature, feature, crsFunction, options);\n    }\n  }\n}\n\n/**\n * @typedef {object} GeoJsonDataSource.LoadOptions\n *\n * Initialization options for the <code>load</code> method.\n *\n * @property {string} [sourceUri] Overrides the url to use for resolving relative links.\n * @property {GeoJsonDataSource.describe} [describe=GeoJsonDataSource.defaultDescribeProperty] A function which returns a Property object (or just a string).\n * @property {number} [markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @property {string} [markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @property {Color} [markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @property {Color} [stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @property {number} [strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @property {Color} [fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @property {boolean} [clampToGround=GeoJsonDataSource.clampToGround] true if we want the geometry features (polygons or linestrings) clamped to the ground.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * A {@link DataSource} which processes both\n * {@link http://www.geojson.org/|GeoJSON} and {@link https://github.com/mbostock/topojson|TopoJSON} data.\n * {@link https://github.com/mapbox/simplestyle-spec|simplestyle-spec} properties will also be used if they\n * are present.\n *\n * @alias GeoJsonDataSource\n * @constructor\n *\n * @param {string} [name] The name of this data source.  If undefined, a name will be taken from\n *                        the name of the GeoJSON file.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20and%20TopoJSON.html|Cesium Sandcastle GeoJSON and TopoJSON Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20simplestyle.html|Cesium Sandcastle GeoJSON simplestyle Demo}\n *\n * @example\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.GeoJsonDataSource.load('../../SampleData/ne_10m_us_states.topojson', {\n *   stroke: Cesium.Color.HOTPINK,\n *   fill: Cesium.Color.PINK,\n *   strokeWidth: 3,\n *   markerSymbol: '?'\n * }));\n */\nfunction GeoJsonDataSource(name) {\n  this._name = name;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._promises = [];\n  this._pinBuilder = new PinBuilder();\n  this._entityCluster = new EntityCluster();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided GeoJSON or TopoJSON data.\n *\n * @param {Resource|string|object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise<GeoJsonDataSource>} A promise that will resolve when the data is loaded.\n */\nGeoJsonDataSource.load = function (data, options) {\n  return new GeoJsonDataSource().load(data, options);\n};\n\nObject.defineProperties(GeoJsonDataSource, {\n  /**\n   * Gets or sets the default size of the map pin created for each point, in pixels.\n   * @memberof GeoJsonDataSource\n   * @type {number}\n   * @default 48\n   */\n  markerSize: {\n    get: function () {\n      return defaultMarkerSize;\n    },\n    set: function (value) {\n      defaultMarkerSize = value;\n    },\n  },\n  /**\n   * Gets or sets the default symbol of the map pin created for each point.\n   * This can be any valid {@link http://mapbox.com/maki/|Maki} identifier, any single character,\n   * or blank if no symbol is to be used.\n   * @memberof GeoJsonDataSource\n   * @type {string}\n   */\n  markerSymbol: {\n    get: function () {\n      return defaultMarkerSymbol;\n    },\n    set: function (value) {\n      defaultMarkerSymbol = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of the map pin created for each point.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.ROYALBLUE\n   */\n  markerColor: {\n    get: function () {\n      return defaultMarkerColor;\n    },\n    set: function (value) {\n      defaultMarkerColor = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.BLACK\n   */\n  stroke: {\n    get: function () {\n      return defaultStroke;\n    },\n    set: function (value) {\n      defaultStroke = value;\n    },\n  },\n  /**\n   * Gets or sets the default width of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {number}\n   * @default 2.0\n   */\n  strokeWidth: {\n    get: function () {\n      return defaultStrokeWidth;\n    },\n    set: function (value) {\n      defaultStrokeWidth = value;\n    },\n  },\n  /**\n   * Gets or sets default color for polygon interiors.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.YELLOW\n   */\n  fill: {\n    get: function () {\n      return defaultFill;\n    },\n    set: function (value) {\n      defaultFill = value;\n    },\n  },\n  /**\n   * Gets or sets default of whether to clamp to the ground.\n   * @memberof GeoJsonDataSource\n   * @type {boolean}\n   * @default false\n   */\n  clampToGround: {\n    get: function () {\n      return defaultClampToGround;\n    },\n    set: function (value) {\n      defaultClampToGround = value;\n    },\n  },\n\n  /**\n   * Gets an object that maps the name of a crs to a callback function which takes a GeoJSON coordinate\n   * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of GeoJSON which\n   * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,\n   * for example 'EPSG:4326'.\n   * @memberof GeoJsonDataSource\n   * @type {object}\n   */\n  crsNames: {\n    get: function () {\n      return crsNames;\n    },\n  },\n\n  /**\n   * Gets an object that maps the href property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming\n   * the link has a type specified.\n   * @memberof GeoJsonDataSource\n   * @type {object}\n   */\n  crsLinkHrefs: {\n    get: function () {\n      return crsLinkHrefs;\n    },\n  },\n\n  /**\n   * Gets an object that maps the type property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in <code>crsLinkHrefs</code> take precedence over this object.\n   * @memberof GeoJsonDataSource\n   * @type {object}\n   */\n  crsLinkTypes: {\n    get: function () {\n      return crsLinkTypes;\n    },\n  },\n});\n\nObject.defineProperties(GeoJsonDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {string}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * This DataSource only defines static data, therefore this property is always undefined.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    value: undefined,\n    writable: false,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, replacing any existing data.\n *\n * @param {Resource|string|object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.load = function (data, options) {\n  return preload(this, data, options, true);\n};\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, without replacing any existing data.\n *\n * @param {Resource|string|object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.process = function (data, options) {\n  return preload(this, data, options, false);\n};\n\nfunction preload(that, data, options, clear) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  }\n  //>>includeEnd('debug');\n\n  DataSource.setLoading(that, true);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  // User specified credit\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  that._credit = credit;\n\n  let promise = data;\n  let sourceUri = options.sourceUri;\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchJson();\n    sourceUri = defaultValue(sourceUri, data.getUrlComponent());\n\n    // Add resource credits to our list of credits to display\n    const resourceCredits = that._resourceCredits;\n    const credits = data.credits;\n    if (defined(credits)) {\n      const length = credits.length;\n      for (let i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  options = {\n    describe: defaultValue(options.describe, defaultDescribeProperty),\n    markerSize: defaultValue(options.markerSize, defaultMarkerSize),\n    markerSymbol: defaultValue(options.markerSymbol, defaultMarkerSymbol),\n    markerColor: defaultValue(options.markerColor, defaultMarkerColor),\n    strokeWidthProperty: new ConstantProperty(\n      defaultValue(options.strokeWidth, defaultStrokeWidth)\n    ),\n    strokeMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.stroke, defaultStroke)\n    ),\n    fillMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.fill, defaultFill)\n    ),\n    clampToGround: defaultValue(options.clampToGround, defaultClampToGround),\n  };\n\n  return Promise.resolve(promise)\n    .then(function (geoJson) {\n      return load(that, geoJson, options, sourceUri, clear);\n    })\n    .catch(function (error) {\n      DataSource.setLoading(that, false);\n      that._error.raiseEvent(that, error);\n      throw error;\n    });\n}\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nGeoJsonDataSource.prototype.update = function (time) {\n  return true;\n};\n\nfunction load(that, geoJson, options, sourceUri, clear) {\n  let name;\n  if (defined(sourceUri)) {\n    name = getFilenameFromUri(sourceUri);\n  }\n\n  if (defined(name) && that._name !== name) {\n    that._name = name;\n    that._changed.raiseEvent(that);\n  }\n\n  const typeHandler = geoJsonObjectTypes[geoJson.type];\n  if (!defined(typeHandler)) {\n    throw new RuntimeError(`Unsupported GeoJSON object type: ${geoJson.type}`);\n  }\n\n  //Check for a Coordinate Reference System.\n  const crs = geoJson.crs;\n  let crsFunction = crs !== null ? defaultCrsFunction : null;\n\n  if (defined(crs)) {\n    if (!defined(crs.properties)) {\n      throw new RuntimeError(\"crs.properties is undefined.\");\n    }\n\n    const properties = crs.properties;\n    if (crs.type === \"name\") {\n      crsFunction = crsNames[properties.name];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(`Unknown crs name: ${properties.name}`);\n      }\n    } else if (crs.type === \"link\") {\n      let handler = crsLinkHrefs[properties.href];\n      if (!defined(handler)) {\n        handler = crsLinkTypes[properties.type];\n      }\n\n      if (!defined(handler)) {\n        throw new RuntimeError(\n          `Unable to resolve crs link: ${JSON.stringify(properties)}`\n        );\n      }\n\n      crsFunction = handler(properties);\n    } else if (crs.type === \"EPSG\") {\n      crsFunction = crsNames[`EPSG:${properties.code}`];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(`Unknown crs EPSG code: ${properties.code}`);\n      }\n    } else {\n      throw new RuntimeError(`Unknown crs type: ${crs.type}`);\n    }\n  }\n\n  return Promise.resolve(crsFunction).then(function (crsFunction) {\n    if (clear) {\n      that._entityCollection.removeAll();\n    }\n\n    // null is a valid value for the crs, but means the entire load process becomes a no-op\n    // because we can't assume anything about the coordinates.\n    if (crsFunction !== null) {\n      typeHandler(that, geoJson, geoJson, crsFunction, options);\n    }\n\n    return Promise.all(that._promises).then(function () {\n      that._promises.length = 0;\n      DataSource.setLoading(that, false);\n      return that;\n    });\n  });\n}\n\n/**\n * This callback is displayed as part of the GeoJsonDataSource class.\n * @callback GeoJsonDataSource.describe\n * @param {object} properties The properties of the feature.\n * @param {string} nameProperty The property key that Cesium estimates to have the name of the feature.\n */\nexport default GeoJsonDataSource;\n","import { render } from \"./trail_line.vue?vue&type=template&id=39a159fb&scoped=true\"\nimport script from \"./trail_line.vue?vue&type=script&lang=js\"\nexport * from \"./trail_line.vue?vue&type=script&lang=js\"\n\nimport \"./trail_line.vue?vue&type=style&index=0&id=39a159fb&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Git\\\\webgis-demo\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-39a159fb\"]])\n\nexport default __exports__","import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|string} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {string} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(\n    buildModuleUrl(`Assets/Textures/maki/${encodeURIComponent(id)}.png`),\n    undefined,\n    color,\n    size,\n    this._cache\n  );\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {string} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nconst colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  const imageSize = size / 2.5;\n  let sizeX = imageSize;\n  let sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  const x = Math.round((size - sizeX) / 2);\n  const y = Math.round((7 / 24) * size - sizeY / 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nconst stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  const id = JSON.stringify(stringifyScratch);\n\n  const item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    const resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    const promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    const image = writeTextToCanvas(label, {\n      font: `bold ${size}px sans-serif`,\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;\n"],"names":["array","n","t","j","length","i","x","transform","identity","x0","y0","kx","scale","ky","dx","translate","dy","input","output","Array","topology","o","objects","type","features","geometries","map","feature","id","bbox","properties","geometry","object","transformPoint","arcs","arc","points","pop","a","k","push","reverse","point","p","line","ring","polygon","coordinates","_createElementBlock","_hoisted_1","getFilenameFromUri","uri","defined","DeveloperError","uriObject","Uri","normalize","path","index","lastIndexOf","substr","defaultCrsFunction","Cartesian3","crsNames","crsLinkHrefs","crsLinkTypes","defaultMarkerSymbol","defaultMarkerSize","defaultMarkerColor","Color","defaultStroke","defaultStrokeWidth","defaultFill","defaultClampToGround","sizes","small","medium","large","simpleStyleIdentifiers","defaultDescribe","nameProperty","html","key","hasOwnProperty","indexOf","value","createDescriptionCallback","describe","description","time","result","defaultDescribeProperty","CallbackProperty","createObject","geoJson","entityCollection","finalId","getById","createGuid","entity","getOrCreateEntity","name","title","namePropertyPrecedence","Number","MAX_VALUE","lowerKey","toLowerCase","test","ConstantProperty","coordinatesArrayToCartesianArray","crsFunction","positions","geoJsonObjectTypes","Feature","processFeature","FeatureCollection","processFeatureCollection","GeometryCollection","processGeometryCollection","LineString","processLineString","MultiLineString","processMultiLineString","MultiPoint","processMultiPoint","MultiPolygon","processMultiPolygon","Point","processPoint","Polygon","processPolygon","Topology","processTopology","geometryTypes","dataSource","notUsed","options","_entityCollection","RuntimeError","geometryType","geometryHandler","featureCollection","len","undefined","geometryCollection","createPoint","symbol","markerSymbol","color","markerColor","size","markerSize","cssColor","defaultValue","canvasOrPromise","_pinBuilder","fromText","toUpperCase","fromMakiIconId","fromColor","billboard","BillboardGraphics","verticalOrigin","VerticalOrigin","clampToGround","heightReference","HeightReference","position","ConstantPositionProperty","promise","Promise","resolve","then","image","catch","_promises","createLineString","material","strokeMaterialProperty","widthProperty","strokeWidthProperty","width","stroke","opacity","getValue","clone","alpha","ColorMaterialProperty","polylineGraphics","PolylineGraphics","polyline","arcType","ArcType","lineStrings","createPolygon","outlineColorProperty","fillMaterialProperty","fillColor","fill","materialColor","PolygonGraphics","outline","outlineColor","outlineWidth","holes","PolygonHierarchy","hierarchy","perPositionHeight","height","polygons","property","topojson","typeHandler","GeoJsonDataSource","this","_name","_changed","Event","_error","_isLoading","_loading","EntityCollection","PinBuilder","_entityCluster","EntityCluster","_credit","_resourceCredits","preload","that","data","clear","DataSource","credit","Credit","sourceUri","Resource","fetchJson","getUrlComponent","resourceCredits","credits","strokeWidth","load","error","raiseEvent","crs","handler","href","JSON","stringify","code","removeAll","all","Object","defineProperties","get","set","prototype","clock","writable","entities","isLoading","changedEvent","errorEvent","loadingEvent","show","clustering","process","update","road","require","SpriteLineMaterialProperty","constructor","_definitionChanged","Cesium","_speed","_color","speed","isConstant","definitionChanged","getType","equals","other","fabric","uniforms","source","translucent","mounted","init","methods","viewer","baseLayer","url","subdomains","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","zoomTo","dataSources","add","values","__exports__","render","_cache","createPin","fromUrl","buildModuleUrl","encodeURIComponent","text","colorScratch","drawPin","context2D","save","fillStyle","toCssColorString","strokeStyle","brighten","lineWidth","beginPath","moveTo","lineTo","bezierCurveTo","closePath","restore","drawIcon","imageSize","sizeX","sizeY","Math","round","y","globalCompositeOperation","drawImage","fillRect","stringifyScratch","label","cache","item","canvas","document","createElement","getContext","resource","fetchImage","writeTextToCanvas","font"],"sourceRoot":""}